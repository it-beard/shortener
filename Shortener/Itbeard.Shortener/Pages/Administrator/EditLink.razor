@page "/admin/edit/{id}"
@attribute [Authorize]

@using Itbeard.Services.Interfaces
@using Itbeard.Services.Exceptions
@using Itbeard.Models

@inject NavigationManager NavigationManager
@inject IUrlService urlService
@inject IStringLocalizer<Localizations> Loc

<div class="custom-container">
    <NavMenu />
    <h2>
        @Loc[Localizations.EditLink_Header]
    </h2>

    <div class="form-group">
        <label for="link">
            @Loc[Localizations.EditLink_TargetUrl]
        </label>
        <input id="link"
               class="form-control"
               type="text"
               required="required"
               @bind="url.TargetUrl"
               title="@Loc[Localizations.EditLink_TargetUrl]"
               placeholder="@Loc[Localizations.EditLink_TargetUrlPlaceholder]">
    </div>

    <div class="form-group">
        <label for="link">
            @Loc[Localizations.EditLink_ShortName]
        </label>
        <input id="name"
               class="form-control"
               type="text"
               @bind="url.ShortName"
               title="@Loc[Localizations.EditLink_ShortName]"
               disabled="disabled">
        <small id="nateNote" class="form-text text-muted">
            @Loc[Localizations.EditLink_ShortNameNote]
        </small>
    </div>

    <div class="form-group">
        <button class="btn btn-success w-100"
                @onclick="OnButtonClick"
                disabled="@(url == null || url.Id == Guid.Empty)"
                title="@Loc[Localizations.EditLink_SaveButton]">
            @Loc[Localizations.EditLink_SaveButton]
        </button>
    </div>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="errors">
            @error
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private UrlModel url = new();
    private string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var successParsed = Guid.TryParse(Id, out var parsedId);
        if (!successParsed)
        {
            NavigationManager.NavigateTo("admin");
        }

        url = await GetUrlAsync(parsedId);
    }

    private async Task OnButtonClick()
    {
        error = string.Empty;
        try
        {
            await urlService.EditAsync(url.Id, url.TargetUrl);
            NavigationManager.NavigateTo("admin");
        }
        catch (TargetUrlEmptyException)
        {
            error = Loc[Localizations.EditLink_Exception_TargetUrlEmpty];
        }
    }

    private async Task<UrlModel> GetUrlAsync(Guid id)
    {
        return await urlService.GetByIdAsync(id);
    }
}