@page "/admin/edit/{id}"
@attribute [Authorize]

@using Itbeard.Services.Interfaces
@using Itbeard.Services.Exceptions
@using Itbeard.Models

@inject NavigationManager NavigationManager
@inject IUrlService urlService

<div class="custom-container">
    <NavMenu />
    <h2>Редактирование ссылки</h2>
    
    <div class="form-group">
        <input class="form-control" type="text" required="required" @bind="url.TargetUrl" placeholder="Введите новый целевой адрес">
    </div>
    
    <div class="form-group">
        <input class="form-control" type="text" @bind="url.ShortName" disabled="disabled">
    </div>
    
    <div class="form-group">
        <button class="btn btn-success w-100" @onclick="OnButtonClick" disabled="@(url == null || url.Id == Guid.Empty)">Сохранить</button>
    </div>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="errors">
            @error
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private UrlModel url = new();
    private string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var successParsed = Guid.TryParse(Id, out var parsedId);
        if (!successParsed)
        {
            NavigationManager.NavigateTo("admin");
        }
        
        url = await GetUrlAsync(parsedId);
    }
    
    private async Task OnButtonClick()
    {
        error = string.Empty;
        try
        {
            await urlService.EditAsync(url.Id, url.TargetUrl);
            NavigationManager.NavigateTo("admin");
        }
        catch (TargetUrlEmptyException ex)
        {
            error = ex.Message;
        }
        catch (DuplicateShortUrlNameException ex)
        {
            error = ex.Message;
        }
    }
    
    private async Task<UrlModel> GetUrlAsync(Guid id)
    {
        return await urlService.GetByIdAsync(id);
    }
}