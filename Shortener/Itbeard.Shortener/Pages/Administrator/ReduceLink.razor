@page "/admin/reduce"
@attribute [Authorize]
@using Itbeard.Services.Interfaces
@using Itbeard.Core
@using Itbeard.Services.Exceptions
@using TextCopy
@inject IUrlService urlService
@inject IConfiguration configuration

<div class="custom-container">
    <NavMenu />
    <h2>Сокращение ссылки</h2>
    
    <div class="form-group">
        <input class="form-control" type="text" required="required" @bind="link" placeholder="Введите ссылку для сокращения">
    </div>
    
    <div class="form-group">
        <input class="form-control" type="text" @bind="name" placeholder="Введите название ссылки (не обязательное поле до 20 символов)">
    </div>
    
    <div class="form-group">
        <button class="btn btn-success  w-100" @onclick="OnCreateButtonClick">Создать</button>
    </div>

    @if (!string.IsNullOrEmpty(reducedUrl))
    {
        <div class="form-group reduce">
            <input class="form-control" type="text" @bind="reducedUrl" placeholder="Результат">
        </div>

        <div class="form-group copy">
            <button class="btn btn-primary  w-100" @onclick="OnCopyToClipboard">Скопировать в буфер</button>
        </div>
    }

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="errors">
            @error
        </div>
    }
</div>

@code {
    private string link = string.Empty;
    private string name = string.Empty;
    private string reducedUrl = string.Empty;
    private string error = string.Empty;

    private async Task OnCreateButtonClick()
    {
        if (!string.IsNullOrEmpty(name) && name.Length > Constants.MaxShortUrlNameLength)
        {
            error = "Недопустимая длина имени ссылки";
            return;
        }
        
        error = string.Empty;
        reducedUrl = string.Empty;
        try
        {
            var urlModel = await urlService.ReduceAsync(link, name);
            if (urlModel != null)
            {
                reducedUrl = $"{configuration["AppUrl"]}/{urlModel.ShortName}";
            }
        }
        catch (TargetUrlEmptyException ex)
        {
            error = ex.Message;
        }
        catch (DuplicateShortUrlNameException ex)
        {
            error = ex.Message;
        }
    }

    private void OnCopyToClipboard()
    {
        var clipboard = new Clipboard();
        clipboard.SetText(reducedUrl);
    }
}